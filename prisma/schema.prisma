// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  clerkId   String    @unique
  email     String    @unique
  firstName String
  lastName  String
  
  // Company details
  companyName String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  phone       String?
  logo        String?
  
  subscription Subscription? 
  projects    Project[] 
  documents   Document[]
  clients     Client[]
  invoices    Invoice[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subscription {
  id        String    @id @default(uuid())
  
  userId              String    @unique
  user                User      @relation(fields: [userId], references: [clerkId])

  
  stripeCustomerId String @unique
  stripeSubscriptionId String @unique
  stripePriceId String
  stripeCurrentPeriodEnd DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id                  String    @id @default(uuid())
  
  userId              String
  user                User      @relation(fields: [userId], references: [clerkId])
  
  name                String

  documents           Document[] @relation("ProjectToDocument")

  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model Document {
  id                  String    @id @default(uuid())

  projectId           String
  project Project @relation("ProjectToDocument", fields: [projectId], references: [id])

  userId              String
  user                User      @relation(fields: [userId], references: [clerkId])
  
  name                String
  content             String
  
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

model Client {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [clerkId])
  
  name      String
  email     String?
  phone     String?
  address   String?
  city      String?
  state     String?
  zip       String?
  invoices  Invoice[]
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Invoice {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [clerkId])
  
  clientId        String
  client          Client    @relation(fields: [clientId], references: [id])
  
  invoiceNumber   String    @unique
  invoiceDate     DateTime  @default(now())
  dueDate         DateTime
  status          String    @default("DRAFT") // DRAFT, SENT, PAID
  
  items           InvoiceItem[]
  
  subtotal        Float
  taxRate         Float     @default(0)
  taxAmount       Float     @default(0)
  total           Float
  
  paymentTerms    String?
  notes           String?
  
  viewCount       Int       @default(0)
  lastViewed      DateTime?
  shareableLink   String?   @unique
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model InvoiceItem {
  id          String    @id @default(uuid())
  invoiceId   String
  invoice     Invoice   @relation(fields: [invoiceId], references: [id])
  
  description String
  quantity    Float
  unitPrice   Float
  tax         Float     @default(0)
  amount      Float
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
